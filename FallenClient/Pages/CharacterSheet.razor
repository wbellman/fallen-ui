@page "/character-sheet"
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json
@using FallenClient.Library.Models
@using FallenClient.Library.Values
@using FallenClient.Components
@using FallenClient.Library.Clients
@using global::Library.Operations.Outcomes

@inject FallenApi Api

<div class="-sheet">
    <!-- Identity Card at the Top -->
    <div class="identity-section">
        <IdentityCard
            Name="@Character?.Name"
            Portrait="@Character?.Portrait"
            Coins="@Coins"
            />
    </div>

    <div class="control-panel-card">
        <div class="control-panel">
            <!-- Left-aligned buttons -->
            <div class="left-controls">
                <button class="btn btn-primary" @onclick="SaveCharacterSheet">💾</button>
                <select class="form-select">
                    <option selected>Select Character</option>
                    <!-- Options for existing s go here -->
                    @foreach (var character in AvailableCharacters)
                    {
                        <option>@character</option>
                    } 
                </select>
                <button class="bth btn-outline-secondary" @onclick="LoadCharacterList">🔃</button>
                <button class="btn btn-secondary">📂</button>
                <button class="btn btn-success">🗒️</button>
            </div>

            <!-- Right-aligned button -->
            <div class="right-controls">
                <button class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>


    <!-- Actives Section: Trouble and High Concept -->
    <div class="aspects-section d-flex flex-column gap-3">
        <AspectCard Active="@(new ActiveAspect(Guid.NewGuid(), new Aspect(AspectType.Trouble, string.Empty)))"/>
        <AspectCard Active="@(new ActiveAspect(Guid.NewGuid(), new Aspect(AspectType.Concept, string.Empty)))"/>
    </div>

    <!-- Main Content Section with Skills Sidebar and Positive/Negative Actives -->
    <div class="main-content">
        <!-- Skills Sidebar on the Right -->
        <div class="skills-sidebar">
            <SkillContainer/>
        </div>

        <!-- Positive and Negative Actives -->
        <div class="effects-section">
            <AspectContainer Title="Positive Effects" AllowedAspectType="AspectType.Boost | AspectType.Stunt | AspectType.Magic | AspectType.Concept"/>
            <AspectContainer Title="Negative Effects" AllowedAspectType="AspectType.Consequence | AspectType.Stressor"/>
        </div>
    </div>
</div>

@code {

    private Character? Character { get; set; }
    private List<string> AvailableCharacters { get; set; } = [];
    
    private int Coins => Character?.Coins ?? 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCharacterList();
        await LoadCharacterSheet();
    }

    // Method to serialize the  sheet data to JSON
    private async Task SaveCharacterSheet()
    {
        var Json = JsonSerializer.Serialize(Character);
        Console.WriteLine("Character JSON: " + Json);
    }

    // Method to deserialize JSON back into the  sheet data
    private async Task LoadCharacterList()
    {
        Console.WriteLine("Loading  list...");
        var listOutcome = await Api.Get<List<string>>("/characters/list");

        if (listOutcome is FailureOutcome<List<string>> fail)
        {
            Console.WriteLine("Failed to load  list: " + fail.Value.Message);
            return;
        }

        AvailableCharacters = listOutcome.Finish().Value as List<string> ?? [];
        Console.WriteLine($"Loaded {AvailableCharacters.Count} s.");
    }

    private async Task LoadCharacterSheet(string? name = null)
    {
        var characterToLoad = name ?? AvailableCharacters.FirstOrDefault();
        Console.WriteLine($"Loading {characterToLoad}...");
        
        if(string.IsNullOrWhiteSpace(characterToLoad))
        {
            Console.WriteLine($"No s available.");
            Character = new Character();
            return;
        }
        
        var Outcome = await Api.Get<Character>($"/characters/load/{characterToLoad}");

        if (Outcome is FailureOutcome<Character> fail)
        {
            Console.WriteLine($"Failed to load {characterToLoad}: " + fail.Value.Message);
            Character = new Character();
            return;
        }

        Character = Outcome.Finish().Value as Character ?? new Character();
        Console.WriteLine($"Loaded  {characterToLoad}!");
    }

}